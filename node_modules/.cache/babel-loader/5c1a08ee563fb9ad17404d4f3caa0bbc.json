{"ast":null,"code":"var _jsxFileName = \"/workspace/template-typescript-react/src/components/ShoppingCart.jsx\";\nimport React, { PropTypes, Component } from 'react';\nimport { DropTarget } from 'react-dnd'; //import HTML5Backend from \"react-dnd-html5-backend\";\n// ShoppingCart DND Spec\n// \"A plain object implementing the drop target specification\"\n//\n// - DropTarget Methods (All optional)\n// - drop: Called when a compatible item is dropped.\n// - hover: Called when an item is hovered over the component.\n// - canDrop: Use it to specify whether the drop target is able to accept\n// the item.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShoppingCartSpec = {\n  drop() {\n    return {\n      name: 'ShoppingCart'\n    };\n  }\n\n}; // ShoppingCart DropTarget - collect\n// \"The collecting function.\n//\n// - connect: An instance of DropTargetConnector.\n// You use it to assign the drop target role to a DOM node.\n//\n// - monitor: An instance of DropTargetMonitor.\n// You use it to connect state from the React DnD to props.\n// Available functions to get state include canDrop(), isOver() and didDrop()\n\nlet collect = (connect, monitor) => {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop()\n  };\n};\n\nclass ShoppingCart extends Component {\n  render() {\n    const {\n      canDrop,\n      isOver,\n      connectDropTarget\n    } = this.props;\n    const isActive = canDrop && isOver;\n    let backgroundColor = '#FFFFFF';\n\n    if (isActive) {\n      backgroundColor = '#F7F7BD';\n    } else if (canDrop) {\n      backgroundColor = '#F7F7F7';\n    }\n\n    const style = {\n      backgroundColor: backgroundColor\n    };\n    return connectDropTarget( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shopping-cart\",\n      style: style,\n      children: isActive ? 'Hummmm, snack!' : 'Drag here to order!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 2\n    }, this));\n  }\n\n}\n/*ShoppingCart.propTypes = {\n connectDropTarget: PropTypes.func.isRequired,\n isOver: PropTypes.bool.isRequired,\n canDrop: PropTypes.bool.isRequired\n}*/\n\n\nexport default DropTarget(\"snack\", ShoppingCartSpec, collect)(ShoppingCart);","map":{"version":3,"sources":["/workspace/template-typescript-react/src/components/ShoppingCart.jsx"],"names":["React","PropTypes","Component","DropTarget","ShoppingCartSpec","drop","name","collect","connect","monitor","connectDropTarget","dropTarget","isOver","canDrop","ShoppingCart","render","props","isActive","backgroundColor","style"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,UAAT,QAA2B,WAA3B,C,CACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,gBAAgB,GAAG;AACxBC,EAAAA,IAAI,GAAG;AACP,WAAO;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAP;AACC;;AAHuB,CAAzB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AACnC,SAAO;AACPC,IAAAA,iBAAiB,EAAEF,OAAO,CAACG,UAAR,EADZ;AAEPC,IAAAA,MAAM,EAAEH,OAAO,CAACG,MAAR,EAFD;AAGPC,IAAAA,OAAO,EAAEJ,OAAO,CAACI,OAAR;AAHF,GAAP;AAKA,CAND;;AAOA,MAAMC,YAAN,SAA2BZ,SAA3B,CAAqC;AACpCa,EAAAA,MAAM,GAAG;AAET,UAAM;AAAEF,MAAAA,OAAF;AAAWD,MAAAA,MAAX;AAAmBF,MAAAA;AAAnB,QAAyC,KAAKM,KAApD;AACA,UAAMC,QAAQ,GAAGJ,OAAO,IAAID,MAA5B;AACA,QAAIM,eAAe,GAAG,SAAtB;;AACA,QAAID,QAAJ,EAAc;AACdC,MAAAA,eAAe,GAAG,SAAlB;AACC,KAFD,MAEO,IAAIL,OAAJ,EAAa;AACpBK,MAAAA,eAAe,GAAG,SAAlB;AACC;;AACD,UAAMC,KAAK,GAAG;AACdD,MAAAA,eAAe,EAAEA;AADH,KAAd;AAIA,WAAOR,iBAAiB,eACxB;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,KAAK,EAAES,KAAtC;AAAA,gBACCF,QAAQ,GACT,gBADS,GAET;AAHA;AAAA;AAAA;AAAA;AAAA,YADwB,CAAxB;AAQC;;AAvBmC;AAyBrC;AACA;AACA;AACA;AACA;;;AACA,eAAed,UAAU,CAAC,OAAD,EAAUC,gBAAV,EAA4BG,OAA5B,CAAV,CAA+CO,YAA/C,CAAf","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport { DropTarget } from 'react-dnd';\n//import HTML5Backend from \"react-dnd-html5-backend\";\n\n\n\n\n// ShoppingCart DND Spec\n// \"A plain object implementing the drop target specification\"\n//\n// - DropTarget Methods (All optional)\n// - drop: Called when a compatible item is dropped.\n// - hover: Called when an item is hovered over the component.\n// - canDrop: Use it to specify whether the drop target is able to accept\n// the item.\nconst ShoppingCartSpec = {\n drop() {\n return { name: 'ShoppingCart' };\n }\n};\n// ShoppingCart DropTarget - collect\n// \"The collecting function.\n//\n// - connect: An instance of DropTargetConnector.\n// You use it to assign the drop target role to a DOM node.\n//\n// - monitor: An instance of DropTargetMonitor.\n// You use it to connect state from the React DnD to props.\n// Available functions to get state include canDrop(), isOver() and didDrop()\nlet collect = (connect, monitor) => {\n return {\n connectDropTarget: connect.dropTarget(),\n isOver: monitor.isOver(),\n canDrop: monitor.canDrop()\n };\n}\nclass ShoppingCart extends Component {\n render() {\n     \n const { canDrop, isOver, connectDropTarget } = this.props;\n const isActive = canDrop && isOver;\n let backgroundColor = '#FFFFFF';\n if (isActive) {\n backgroundColor = '#F7F7BD';\n } else if (canDrop) {\n backgroundColor = '#F7F7F7';\n }\n const style = {\n backgroundColor: backgroundColor\n };\n\n return connectDropTarget(\n <div className='shopping-cart' style={style}>\n {isActive ?\n 'Hummmm, snack!' :\n 'Drag here to order!'\n }\n </div>\n );\n }\n}\n/*ShoppingCart.propTypes = {\n connectDropTarget: PropTypes.func.isRequired,\n isOver: PropTypes.bool.isRequired,\n canDrop: PropTypes.bool.isRequired\n}*/\nexport default DropTarget(\"snack\", ShoppingCartSpec, collect)(ShoppingCart);"]},"metadata":{},"sourceType":"module"}